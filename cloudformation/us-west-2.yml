AWSTemplateFormatVersion: "2010-09-09"
Description: "Mozilla Single Sign On Dashboard"
Mappings:
  dev:
      us-east-1:
        branch: "git checkout master"
        CertificateARN: "arn:aws:acm:us-east-1:656532927350:certificate/af98d466-2099-4d99-b1d1-dc222b8e59b0"
      us-west-2:
        AMI: ami-983daaf8
        branch: "git checkout master"
        CertificateARN: "arn:aws:acm:us-west-2:656532927350:certificate/ade32b62-e360-4ecd-8c3c-f44671dba94f"
      eu-west-1:
        branch: "git checkout master"
        CertificateARN: "arn:aws:acm:eu-central-1:656532927350:certificate/105a2ca8-3253-4d0f-973e-91d59584b4f6"
  prod:
      us-east-1:
        branch: "git checkout production"
        CertificateARN: "arn:aws:acm:us-east-1:371522382791:certificate/12dd7f1a-177c-4a11-8b62-ca098d3ee40c"
      us-west-2:
        AMI: ami-983daaf8
        branch: "git checkout production"
        CertificateARN: "arn:aws:acm:us-west-2:371522382791:certificate/8f0dfce8-88c1-4b9c-b3bd-850af8dcc0a5"
      eu-west-1:
        branch: "git checkout production"
        CertificateARN: "arn:aws:acm:eu-central-1:371522382791:certificate/82bcf762-ea43-4f32-b78e-4bbabe2f6fe4"
Parameters:
  SSHKeyName:
    Description: Name of the existing ssh key that should have access
    Type: String
    MinLength: "1"
    Default: akrug-key
  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - prod
      - dev
Conditions:
  UseProdCondition:
    !Equals [!Ref EnvType, prod]
  UseDevCondition:
    !Equals [!Ref EnvType, dev]
Resources:
  SSODashboardInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: SSO-Dashboard
  SSODashboardVPC:
    Type: "AWS::EC2::VPC"
    DependsOn: SSODashboardInternetGateway
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: SSO-Dashboard
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: SSODashboardVPC
    Properties:
      VpcId:
        Ref: SSODashboardVPC
      InternetGatewayId:
        Ref: SSODashboardInternetGateway
  SSODashboardRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: [ SSODashboardVPC, SSODashboardInternetGateway, AttachGateway ]
    Properties:
      VpcId:
        Ref: SSODashboardVPC
      Tags:
        - Key: Name
          Value: SSO-Dashboard
  DashboardDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: SSODashboardInternetGateway
    Properties:
      RouteTableId:
        Ref: SSODashboardRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: SSODashboardInternetGateway
  SSODashboardSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: SSODashboardRouteTable
    Properties:
      AvailabilityZone: "us-west-2a"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: SSODashboardVPC
      Tags:
        - Key: Name
          Value: SSO-Dashboard Subnet 1
  SSODashboardSubnet2:
    Type: "AWS::EC2::Subnet"
    DependsOn: SSODashboardRouteTable
    Properties:
      AvailabilityZone: "us-west-2b"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: SSODashboardVPC
      Tags:
        - Key: Name
          Value: SSO-Dashboard Subnet 2
  SSODashboardSubnet3:
    Type: "AWS::EC2::Subnet"
    DependsOn: SSODashboardRouteTable
    Properties:
      AvailabilityZone: "us-west-2c"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: SSODashboardVPC
      Tags:
        - Key: Name
          Value: SSO-Dashboard Subnet 3
  SSODashboardRouteAssoc1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: DashboardDefaultRoute
    Properties:
      RouteTableId:
        Ref: SSODashboardRouteTable
      SubnetId:
        Ref: SSODashboardSubnet1
  SSODashboardRouteAssoc2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: DashboardDefaultRoute
    Properties:
      RouteTableId:
        Ref: SSODashboardRouteTable
      SubnetId:
        Ref: SSODashboardSubnet2
  SSODashboardRouteAssoc3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: DashboardDefaultRoute
    Properties:
      RouteTableId:
        Ref: SSODashboardRouteTable
      SubnetId:
        Ref: SSODashboardSubnet3
  SSODashboardSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: SSODashboardVPC
    Properties:
      GroupDescription: "Allows ports to web instances of dashboard from ELB."
      VpcId:
        Ref: SSODashboardVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8000'
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SSO-Dashboard
  SSODashboardELBSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn: SSODashboardVPC
    Properties:
      GroupDescription: "Allows access to the ELB listeners."
      VpcId:
        Ref: SSODashboardVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SSO-Dashboard ELB
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: SSODashboardELBSecGroup
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: SSODashboardSubnet1
        - Ref: SSODashboardSubnet2
        - Ref: SSODashboardSubnet3
      SecurityGroups:
        - Ref: SSODashboardELBSecGroup
      Tags:
        - Key: Name
          Value: SSO-Dashboard
  ALBHTTPListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBHTTPSListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      Certificates:
        - CertificateArn: !FindInMap [!Ref EnvType, !Ref "AWS::Region", CertificateARN]
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 2
      HealthCheckPath: /health
      HealthCheckPort: 80
      Name: DashboardWebServers-1
      Port: 8000
      Protocol: HTTP
      VpcId:
        Ref: SSODashboardVPC
      Tags:
        - Key: Name
          Value: SSO-Dashboard
  ALBTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 2
      HealthCheckPath: /health
      HealthCheckPort: 80
      Name: DashboardContentDelivery-1
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: SSODashboardVPC
      Tags:
        - Key: Name
          Value: SSO-Dashboard
  SSODashboardLaunchConfigProd:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Condition: UseProdCondition
    Properties:
      KeyName: !Ref SSHKeyName
      ImageId: !FindInMap [!Ref EnvType, !Ref "AWS::Region", AMI]
      IamInstanceProfile: "sso-dashboard-instance-profile"
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all
          runcmd:
            - REGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone/ | sed 's/[a-z]$//')
            - yum update -y
            - yum install ruby wget -y
            - cd /home/ec2-user
            - pip install boto3 --upgrade
            - wget https://aws-codedeploy-$REGION.s3.amazonaws.com/latest/install
            - chmod +x ./install
            - ./install auto
            - cd /home/ec2-user
            - aws ecr get-login --region us-west-2 | bash
            - docker run -d -e SQS_QUEUE=sso-dashboard-fluentd-sqs -v /var/log:/var/log 371522382791.dkr.ecr.us-west-2.amazonaws.com/sqs-fluentd:latest td-agent -c /etc/td-agent/td-agent.conf
            - rm -rf /home/ec2-user/app
            - mkdir -p /home/ec2-user/app
            - git clone https://github.com/mozilla-iam/sso-dashboard.git /home/ec2-user/app
            - cd /home/ec2-user/app
            - git checkout production
            - sed -i s/656532927350/371522382791/g docker-compose.yml
            - chmod +x /home/ec2-user/app/scripts/*
            - /home/ec2-user/app/scripts/build-environment.sh
            - /usr/local/bin/docker-compose up -d
      SecurityGroups:
        - Ref: SSODashboardSecGroup
      InstanceType: "t2.medium"
  SSODashboardLaunchConfigDev:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Condition: UseDevCondition
    DependsOn: [ SSODashboardSubnet1, SSODashboardSubnet2, SSODashboardSubnet3 ]
    Properties:
      KeyName: !Ref SSHKeyName
      ImageId: !FindInMap [!Ref EnvType, !Ref "AWS::Region", AMI]
      IamInstanceProfile: "sso-dashboard-instance-profile"
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all
          runcmd:
            - REGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone/ | sed 's/[a-z]$//')
            - yum update -y
            - yum install ruby wget -y
            - cd /home/ec2-user
            - pip install boto3 --upgrade
            - wget https://aws-codedeploy-$REGION.s3.amazonaws.com/latest/install
            - chmod +x ./install
            - ./install auto
            - aws ecr get-login --region us-west-2 | bash
            - docker run -d -e SQS_QUEUE=sso-dashboard-fluentd-sqs -v /var/log:/var/log 656532927350.dkr.ecr.us-west-2.amazonaws.com/sqs-fluentd:latest td-agent -c /etc/td-agent/td-agent.conf
            - cd /home/ec2-user
            - rm -rf /home/ec2-user/app
            - mkdir -p /home/ec2-user/app
            - git clone https://github.com/mozilla-iam/sso-dashboard.git /home/ec2-user/app
            - cd /home/ec2-user/app
            - chmod +x /home/ec2-user/app/scripts/*
            - cp /home/ec2-user/app/conf/supervisor-ansible.ini /etc/supervisord.d/
            - /home/ec2-user/app/scripts/build-environment.sh
            - service supervisord restart
      SecurityGroups:
        - Ref: SSODashboardSecGroup
      InstanceType: "t2.medium"
  HTTPsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup1
      Conditions:
      - Field: path-pattern
        Values:
        - "/static/*"
      ListenerArn:
        Ref: ALBHTTPSListener
      Priority: 1
  HTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup1
      Conditions:
      - Field: path-pattern
        Values:
        - "*"
      ListenerArn:
        Ref: ALBHTTPListener
      Priority: 1
  SSODashboardASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn: [ SSODashboardSubnet1, SSODashboardSubnet2, SSODashboardSubnet3 ]
    Properties:
      Tags:
        -
          Key: Application
          Value: SSO-Dashboard
          PropagateAtLaunch: true
        -
          Key: Name
          Value: SSO-Dashboard-Worker
          PropagateAtLaunch: true
      TargetGroupARNs:
         - Ref: ALBTargetGroup
         - Ref: ALBTargetGroup1
      MaxSize: "5"
      MinSize: "3"
      VPCZoneIdentifier:
        - Ref: SSODashboardSubnet1
        - Ref: SSODashboardSubnet2
        - Ref: SSODashboardSubnet3
      LaunchConfigurationName:
        !If [UseProdCondition, Ref: SSODashboardLaunchConfigProd, Ref: SSODashboardLaunchConfigDev]
